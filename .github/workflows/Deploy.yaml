name: Deploy Image to EC2 Instance

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    branches:
      - main
      - develop
    types:
      - completed
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  setup-terraform:
    environment: "AWS and Supabase"
    name: Set up AWS EC2 Instance with Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up SSH private key and known_hosts
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          # write key safely (preserves newlines)
          sudo printf '%s\n' "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/my_ec2_key
          sudo chmod 600 ~/.ssh/my_ec2_key

          # add host key to known_hosts to avoid interactive prompt
          if [ -n "${{ secrets.EC2_PUBLIC_IP }}" ]; then
            sudo ssh-keyscan -H "${{ secrets.EC2_PUBLIC_IP }}" >> ~/.ssh/known_hosts || true
            sudo chmod 600 ~/.ssh/known_hosts
          fi

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Apply Terraform and Deliver Code to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my_ec2_key ec2-user@${{ secrets.EC2_PUBLIC_IP }} <<EOF
            echo "--- Clone Repository: ---"
            # only checkout the docker directory based on the workflow branch
            git clone https://github.com/Thee5176/SpringBoot_CQRS --no-checkout
            git sparse-checkout set docker --no-cone
            git checkout ${{ github.event.workflow_run.head_branch }}

            cd SpringBoot_CQRS
            ls -a -L 2

            echo "--- Setup Environment Variables: ---"
            echo "DB_URL=${{ secrets.DB_URL }}"           >> .env
            echo "DB_USERNAME=${{ vars.DB_USER }}"        >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

            echo "--- Pulling latest Docker images: ---"
            docker compose -f docker/compose.yaml -f docker/docker-compose.prod.yaml pull
            docker compose -f docker/compose.yaml -f docker/docker-compose.prod.yaml up -d --no-build

            echo "--- Verifying running containers: ---"
            docker ps

            echo "--- Deployment complete. ---"
          EOF
        working-directory: envs/dev
      
      - name: Set up SSH private key and known_hosts
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          # write key safely (preserves newlines)
          printf '%s\n' "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/my_ec2_key
          chmod 600 ~/.ssh/my_ec2_key

          # add host key to known_hosts to avoid interactive prompt
          if [ -n "${{ secrets.EC2_PUBLIC_IP }}" ]; then
            ssh-keyscan -H "${{ secrets.EC2_PUBLIC_IP }}" >> ~/.ssh/known_hosts || true
            chmod 600 ~/.ssh/known_hosts
          fi